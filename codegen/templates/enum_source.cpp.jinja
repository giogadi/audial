#include "{{headerFilename}}"

#include <unordered_map>
#include <string>
#include <cstdio>

#include "imgui/imgui.h"

{% for ns in namespaces %}
namespace {{ns}} {
{% endfor %}

namespace {

std::unordered_map<std::string, {{enumName}}> const gStringTo{{enumName}} = {
    {% for item in enumItems %}
    { "{{item}}", {{enumName}}::{{item}} }{% if not loop.last %},{% endif %}
    {% endfor %}
};

} // end namespace

char const* g{{enumName}}Strings[] = {
	{% for item in enumItems %}
    "{{item}}"{% if not loop.last %},{% endif %}
    {% endfor %}
};

char const* {{enumName}}ToString({{enumName}} e) {
	return g{{enumName}}Strings[static_cast<int>(e)];
}

{{enumName}} StringTo{{enumName}}(char const* s) {
    auto iter = gStringTo{{enumName}}.find(s);
    if (iter != gStringTo{{enumName}}.end()) {
    	return gStringTo{{enumName}}.at(s);
    }
    printf("ERROR StringTo{{enumName}}: unrecognized value \"%s\"\n", s);
    return static_cast<{{enumName}}>(0);
}

char const* EnumToString({{enumName}} e) {
     return {{enumName}}ToString(e);
}

void StringToEnum(char const* s, {{enumName}}& e) {
     e = StringTo{{enumName}}(s);
}

bool {{enumName}}ImGui(char const* label, {{enumName}}* v) {
    int selectedIx = static_cast<int>(*v);
    bool changed = ImGui::Combo(label, &selectedIx, g{{enumName}}Strings, static_cast<int>({{enumName}}::Count));
    if (changed) {
        *v = static_cast<{{enumName}}>(selectedIx);
    }
    return changed;
}

{% for ns in namespaces %}
}
{% endfor %}
